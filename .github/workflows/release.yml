name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Get version from tag
      id: version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "VERSION_NO_V=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Build binaries
      run: |
        mkdir -p dist
        
        # Build for different platforms
        platforms=(
          "darwin/amd64"
          "darwin/arm64" 
          "linux/amd64"
          "linux/arm64"
          "windows/amd64"
        )
        
        for platform in "${platforms[@]}"; do
          OS=$(echo $platform | cut -d'/' -f1)
          ARCH=$(echo $platform | cut -d'/' -f2)
          OUTPUT_NAME=aphelion-$OS-$ARCH
          
          if [ $OS = "windows" ]; then
            OUTPUT_NAME=$OUTPUT_NAME.exe
          fi
          
          echo "Building $OUTPUT_NAME..."
          
          GOOS=$OS GOARCH=$ARCH go build \
            -ldflags "-X github.com/Exmplr-AI/aphelion-cli/cmd.version=${{ steps.version.outputs.VERSION }} \
                      -X github.com/Exmplr-AI/aphelion-cli/cmd.commit=${{ github.sha }} \
                      -X github.com/Exmplr-AI/aphelion-cli/cmd.date=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
                      -X github.com/Exmplr-AI/aphelion-cli/cmd.builtBy=github-actions" \
            -o dist/$OUTPUT_NAME main.go
        done

    - name: Generate checksums
      run: |
        cd dist
        sha256sum * > checksums.txt
        cat checksums.txt

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Release ${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    needs: release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Get version from tag
      id: version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "VERSION_NO_V=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Setup SSH for Deploy Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.HOMEBREW_DEPLOY_KEY }}" > ~/.ssh/homebrew_deploy_key
        chmod 600 ~/.ssh/homebrew_deploy_key
        ssh-keyscan github.com >> ~/.ssh/known_hosts

    - name: Clone Homebrew Tap
      run: |
        export GIT_SSH_COMMAND="ssh -i ~/.ssh/homebrew_deploy_key"
        git clone git@github.com:Exmplr-AI/homebrew-aphelion.git homebrew-tap

    - name: Download Release Checksums
      run: |
        curl -L -o checksums.txt \
          "https://github.com/Exmplr-AI/aphelion-cli/releases/download/${{ steps.version.outputs.VERSION }}/checksums.txt"
        
        # Extract checksums for each platform
        DARWIN_AMD64_SHA=$(grep "aphelion-darwin-amd64" checksums.txt | cut -d' ' -f1)
        DARWIN_ARM64_SHA=$(grep "aphelion-darwin-arm64" checksums.txt | cut -d' ' -f1)
        LINUX_AMD64_SHA=$(grep "aphelion-linux-amd64" checksums.txt | cut -d' ' -f1)
        LINUX_ARM64_SHA=$(grep "aphelion-linux-arm64" checksums.txt | cut -d' ' -f1)
        
        echo "DARWIN_AMD64_SHA=${DARWIN_AMD64_SHA}" >> $GITHUB_ENV
        echo "DARWIN_ARM64_SHA=${DARWIN_ARM64_SHA}" >> $GITHUB_ENV
        echo "LINUX_AMD64_SHA=${LINUX_AMD64_SHA}" >> $GITHUB_ENV
        echo "LINUX_ARM64_SHA=${LINUX_ARM64_SHA}" >> $GITHUB_ENV

    - name: Update Homebrew Formula
      run: |
        cd homebrew-tap
        mkdir -p Formula
        
        cat > Formula/aphelion.rb << EOF
        class Aphelion < Formula
          desc "Command-line interface for the Aphelion Gateway platform"
          homepage "https://github.com/Exmplr-AI/aphelion-cli"
          version "${{ steps.version.outputs.VERSION_NO_V }}"
          
          if OS.mac?
            if Hardware::CPU.arm?
              url "https://github.com/Exmplr-AI/aphelion-cli/releases/download/${{ steps.version.outputs.VERSION }}/aphelion-darwin-arm64"
              sha256 "${{ env.DARWIN_ARM64_SHA }}"
            else
              url "https://github.com/Exmplr-AI/aphelion-cli/releases/download/${{ steps.version.outputs.VERSION }}/aphelion-darwin-amd64"
              sha256 "${{ env.DARWIN_AMD64_SHA }}"
            end
          elsif OS.linux?
            if Hardware::CPU.arm?
              url "https://github.com/Exmplr-AI/aphelion-cli/releases/download/${{ steps.version.outputs.VERSION }}/aphelion-linux-arm64"
              sha256 "${{ env.LINUX_ARM64_SHA }}"
            else
              url "https://github.com/Exmplr-AI/aphelion-cli/releases/download/${{ steps.version.outputs.VERSION }}/aphelion-linux-amd64"
              sha256 "${{ env.LINUX_AMD64_SHA }}"
            end
          end

          def install
            bin.install Dir["*"].first => "aphelion"
            
            # Generate and install shell completions
            output = Utils.safe_popen_read(bin/"aphelion", "completion", "bash")
            (bash_completion/"aphelion").write output
            
            output = Utils.safe_popen_read(bin/"aphelion", "completion", "zsh")
            (zsh_completion/"_aphelion").write output
            
            output = Utils.safe_popen_read(bin/"aphelion", "completion", "fish")
            (fish_completion/"aphelion.fish").write output
          end

          test do
            system "\#{bin}/aphelion", "version"
            assert_match version.to_s, shell_output("\#{bin}/aphelion version")
          end
        end
        EOF

    - name: Commit and Push Formula Update
      run: |
        cd homebrew-tap
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        git add Formula/aphelion.rb
        git commit -m "Update aphelion to ${{ steps.version.outputs.VERSION }}" || exit 0
        
        export GIT_SSH_COMMAND="ssh -i ~/.ssh/homebrew_deploy_key"
        git push origin main